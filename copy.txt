from tkinter import*
from tkinter import ttk
from tkinter import messagebox
import mysql.connector
import cv2



class Student:
    def __init__(self, root):
        self.root=root
        self.root.geometry("1530x790+0+0")
        self.root.title("student managment system")
        
        #+++vars+++
        
        self.var_dep=StringVar()
        self.var_course=StringVar()
        self.var_year=StringVar()
        self.var_group=StringVar()
        self.var_ID=StringVar()
        self.var_name=StringVar()
        self.var_phone=StringVar()
        self.var_email=StringVar()
        self.var_sort=StringVar()
        
        
        
        main_frame=Frame(bd=2,bg="white")
        main_frame.place(x=10,y=55,width=1430,height=600)
        
        
        #left label
        
        Left_frame = LabelFrame(main_frame,bg="white", bd=2,relief=RIDGE, text="детали студента", font=("times new roman",12,"bold"))
        Left_frame.place(x=10,y=10,width=730,height=580)
        
        
        #current course
        current_course_frame = LabelFrame(Left_frame,bg="white", bd=2,relief=RIDGE, text="курс студента", font=("times new roman",12,"bold"))
        current_course_frame.place(x=5,y=10,width=710,height=150)
        
        #department
        dep_label=Label(current_course_frame, text="Отделение", font=("times new roman",12,"bold"),bg="white")
        dep_label.grid(row=0,column=0,padx=10, sticky=W)
        
        self.dep_combo = ttk.Combobox(current_course_frame,textvariable=self.var_dep, font=("times new roman", 12, "bold"), width=25, state="readonly")
        self.dep_combo["values"] = ("Выберать отделение", "таврическая академия", "физико-технический институт", "Агротехнологическая академия", "академия строительства и архетиктуры")
        self.dep_combo.current(0)
        self.dep_combo.grid(row=0, column=1, padx=2, pady=10, sticky=W)
        self.dep_combo.bind("<<ComboboxSelected>>", self.update_course_combo)
        
        
        
        
        # course
        course_label=Label(current_course_frame, text="Направление",font=("times new roman",12,"bold"),bg="white")
        course_label.grid(row=0,column=2,padx=10, sticky=W)
        
        self.course_combo=ttk.Combobox(current_course_frame, textvariable=self.var_course,font=("times new roman",12,"bold"),width=25,state="readonly")
        self.course_combo.grid(row=0,column=3, padx=2,pady=10,sticky=W)
        
         # year
        year_label=Label(current_course_frame, text="Год", font=("times new roman",12,"bold"),bg="white")
        year_label.grid(row=1,column=0,padx=10, sticky=W)
        
        
        self.year_combo=ttk.Combobox(current_course_frame,textvariable=self.var_year, font=("times new roman",12,"bold"),width=25,state="readonly")
        self.year_combo["values"] = ("Выбрать год","18ХХ", "19ХХ", "20ХХ", "21ХХ", "22ХХ")
        self.year_combo.current(0)
        
        self.year_combo.grid(row=1,column=1, padx=2,pady=10,sticky=W)
        
        
        # group
        group_label=Label(current_course_frame, text="Группа", font=("times new roman",12,"bold"),bg="white")
        group_label.grid(row=1,column=2,padx=10, sticky=W)
        
        
        self.group_combo=ttk.Combobox(current_course_frame,textvariable=self.var_group, font=("times new roman",12,"bold"),width=25,state="readonly")
        self.group_combo["values"] = ("Выбрать группу","01", "02", "03", "04", "05")
        self.group_combo.current(0)
        
        self.group_combo.grid(row=1,column=3, padx=2,pady=10,sticky=W)
        
        
        #class student info 
        class_student_frame = LabelFrame(Left_frame,bg="white", bd=2,relief=RIDGE, text="инфо студента", font=("times new roman",12,"bold"))
        class_student_frame.place(x=5,y=170,width=710,height=300)
        
        
        # student ID
        studentID_label=Label(class_student_frame, text="ID Студента:", font=("times new roman",12,"bold"),bg="white")
        studentID_label.grid(row=0,column=0,padx=10,pady=5 ,sticky=W)
        
        self.studentID_entry=ttk.Entry(class_student_frame, textvariable=self.var_ID,width=20,font=("times new roman",12,"bold"))
        self.studentID_entry.grid(row=0,column=1,padx=10,pady=5, sticky=W)
        
         # student name
        Student_name_label=Label(class_student_frame, text="Имя студента:", font=("times new roman",12,"bold"),bg="white")
        Student_name_label.grid(row=0,column=2,padx=10,pady=5 ,sticky=W)
        
        self.student_name_entry=ttk.Entry(class_student_frame,textvariable=self.var_name, width=20,font=("times new roman",12,"bold"))
        self.student_name_entry.grid(row=0,column=3,padx=10,pady=5, sticky=W)
        
         # email
        student_email_label=Label(class_student_frame, text="Email Студента:", font=("times new roman",12,"bold"),bg="white")
        student_email_label.grid(row=1,column=0,padx=10,pady=5, sticky=W)
        
        self.student_email_entry=ttk.Entry(class_student_frame, width=20,textvariable=self.var_email,font=("times new roman",12,"bold"))
        self.student_email_entry.grid(row=1,column=1,padx=10,pady=5, sticky=W)
        
         # phone num
        student_phone_label=Label(class_student_frame, text="Тел. Студента:", font=("times new roman",12,"bold"),bg="white")
        student_phone_label.grid(row=1,column=2,padx=10,pady=5, sticky=W)
        
        self.student_phone_entry=ttk.Entry(class_student_frame, width=20,textvariable=self.var_phone,font=("times new roman",12,"bold"))
        self.student_phone_entry.grid(row=1,column=3,padx=10,pady=5, sticky=W)
        
         # RADIO BUTTONS 
         
        
        self.var_radio1=StringVar() 
        radiobttn1=ttk.Radiobutton(class_student_frame,variable=self.var_radio1,text="Загрузить Фото", value="Yes")
        radiobttn1.grid(row=2,column=0)
        
        
        radiobttn2=ttk.Radiobutton(class_student_frame,variable=self.var_radio1,text="Не загружать Фото", value="No")
        radiobttn2.grid(row=2,column=1)
        
        # buttons frame 
        
        btn_frame = Frame(Left_frame, bd=2, bg="white")
        btn_frame.place(x=5,y=480,width=710,height=35)
        
        save_btn= Button(btn_frame, command=self.add_data,text="Сохранить",height=1, width=22)
        save_btn.grid(row=0,column=0,padx=5,pady=5)
        
        update_btn= Button(btn_frame,command=self.update_data, text="Обновить",height=1, width=22)
        update_btn.grid(row=0,column=1,padx=5,pady=5)
        
        delete_btn= Button(btn_frame, text="Удалить",command=self.delete_data,height=1, width=22)
        delete_btn.grid(row=0,column=2,padx=5,pady=5)
        
        reset_btn= Button(btn_frame, text="Перезагрузить",command=self.reset_data,height=1, width=22)
        reset_btn.grid(row=0,column=3,padx=5,pady=5)
        
        
        
        btn_frame1 = Frame(Left_frame, bd=2, bg="white")
        btn_frame1.place(x=5,y=520,width=710,height=35)
        
        
        take_photo_btn= Button(btn_frame1, command=self.generate_dataset, text="Загрузить фото",height=1, width=47)
        take_photo_btn.grid(row=0,column=0, padx=5,pady=5)
        
        update_photo_btn= Button(btn_frame1, text="Обновить фото",height=1, width=47)
        update_photo_btn.grid(row=0,column=1, padx=5,pady=5)
        
        
        
        
        #right label
        
        Right_frame = LabelFrame(main_frame,bg="white", bd=2,relief=RIDGE, text="детали студента", font=("times new roman",12,"bold"))
        Right_frame.place(x=750,y=10,width=660,height=580)
        
        search_frame = LabelFrame(Right_frame,bg="white", bd=2,relief=RIDGE, text="поиск", font=("times new roman",12,"bold"))
        search_frame.place(x=5,y=10,width=640,height=100)
        
        search_label=Label(search_frame, text="Поиск по:", font=("times new roman",12,"bold"),bg="white")
        search_label.grid(row=0,column=0,padx=10,pady=5, sticky=W)
        
        self.year_combo=ttk.Combobox(search_frame, textvariable=self.var_sort,font=("times new roman",12,"bold"),width=15,state="readonly")
        self.year_combo["values"] = ("Выбрать","ID", "Имя", "телефон", "адрес")
        self.year_combo.current(0)
        self.year_combo.grid(row=0,column=1, padx=2,pady=10,sticky=W)
        
        
        
        search_btn= Button(search_frame,command=self.search_data, text="Поиск",height=2, width=14)
        search_btn.grid(row=0,column=3, padx=5,pady=13)
        
        ShowAll_btn= Button(search_frame, command=self.fetch_data,text="Показать Все",height=2, width=14)
        ShowAll_btn.grid(row=0,column=4, padx=10,pady=13)
        
        
        table_frame = LabelFrame(Right_frame,bg="white", bd=2,relief=RIDGE)
        table_frame.place(x=5,y=115,width=640,height=428)
        
        scroll_x=ttk.Scrollbar(table_frame,orient=HORIZONTAL)
        scroll_y=ttk.Scrollbar(table_frame,orient=VERTICAL)
        
        self.student_table=ttk.Treeview(table_frame,columns=("ID","Name","Email","phone","dep","course","year","group","photo"),xscrollcommand=scroll_x.set,yscrollcommand=scroll_y.set)
        
        scroll_x.pack(side=BOTTOM,fill=X)
        scroll_y.pack(side=RIGHT,fill=Y)
        scroll_x.config(command=self.student_table.xview)
        scroll_y.config(command=self.student_table.yview)
        
        
        self.student_table.heading("ID",text="ID")
        self.student_table.heading("Name",text="имя")
        self.student_table.heading("Email",text="Email")
        self.student_table.heading("phone",text="Тел.")
        self.student_table.heading("dep",text="Отделение")
        self.student_table.heading("course",text="Направление")
        self.student_table.heading("year",text="Год")
        self.student_table.heading("group",text="Группа")
        self.student_table.heading("photo",text="Статус Фото")
        self.student_table["show"]="headings"
        
        
        self.student_table.column("ID",width=50)
        self.student_table.column("Name",width=150)
        self.student_table.column("Email",width=150)
        self.student_table.column("phone",width=100)
        self.student_table.column("dep",width=200)
        self.student_table.column("course",width=200)
        self.student_table.column("year",width=70)
        self.student_table.column("group",width=70)
        self.student_table.column("photo",width=100)
              
        
        
        self.student_table.pack(fill=BOTH,expand=1)
        
        self.student_table.bind("<ButtonRelease>",self.get_cursor)
        self.fetch_data()
        
        
    def show_window(self):
        self.root.deiconify()
    
    def search_data(self):
        try:
            conn=mysql.connector.connect(host="localhost",port="3308",username="root",password="007366707",database="students")
            my_cursor=conn.cursor()
            my_cursor.execute("select * from students order by %s",(
                self.var_sort.get(),               
            ))
            data = my_cursor.fetchall()
        
            if len(data)!=0:
                self.student_table.delete(*self.student_table.get_children())
                for i in data:
                    self.student_table.insert("",END,values=i)
                conn.commit()
            conn.close()
            
        except Exception as es:
            messagebox.showerror("Fail",f"Из за ошибки:{str(es)}", parent=self.root)
    
        
        
    def update_course_combo(self, event):
        selected_dep = self.dep_combo.get()

        # Clear the current values of course_combo
        self.course_combo.set("")

        if selected_dep == "таврическая академия":
            self.course_combo["values"] = ("Выберать Курс", "some other courses")
        elif selected_dep == "физико-технический институт":
            self.course_combo["values"] = ("Выберать Курс",  "09.03.01 Прикладная информатика", "09.03.04 Программная инженерия")
        elif selected_dep == "Агротехнологическая академия":
            self.course_combo["values"] = ("Выберать Курс", "Some other courses for agriculture")
        elif selected_dep == "академия строительства и архетиктуры":
            self.course_combo["values"] = ("Выберать Курс", "Some other courses for construction and architecture")
        else:
            self.course_combo["values"] = ("Выберать Курс",)

        self.course_combo.current(0)
        
    #============function declare==============

    def add_data(self):
        if self.var_dep.get()=="Выберать отделение" or self.var_name.get()=="" or self.var_ID.get()=="":
            messagebox.showerror("Error","Все поля должны быть заполнены",parent=self.root)
            
        else:
            try:
                conn=mysql.connector.connect(host="localhost",port="3308",username="root",password="007366707",database="students")
                my_cursor=conn.cursor()
                my_cursor.execute("insert into students values(%s,%s,%s,%s,%s,%s,%s,%s,%s)",(
                    self.var_ID.get(),
                    self.var_name.get(),
                    self.var_email.get(),
                    self.var_phone.get(),
                    self.var_dep.get(),
                    self.var_course.get(),
                    self.var_year.get(),
                    self.var_group.get(),
                    self.var_radio1.get()
                ))
                conn.commit()
                self.fetch_data()
                conn.close()
                messagebox.showinfo("Success", "Данные сохранены",parent=self.root)
            except Exception as es:
                messagebox.showerror("Fail",f"Из за ошибки:{str(es)}", parent=self.root)    


    def fetch_data(self):
        conn=mysql.connector.connect(host="localhost",port="3308",username="root",password="007366707",database="students")
        my_cursor=conn.cursor()
        my_cursor.execute("select * from students")
        data = my_cursor.fetchall()
        
        if len(data)!=0:
            self.student_table.delete(*self.student_table.get_children())
            for i in data:
                self.student_table.insert("",END,values=i)
            conn.commit()
        conn.close()
        
    def get_cursor(self,event=""):
        cursor_focus=self.student_table.focus()
        content=self.student_table.item(cursor_focus)
        data=content["values"]
        
        self.var_ID.set(data[0]),
        self.var_name.set(data[1]),
        self.var_email.set(data[2]),
        self.var_phone.set(data[3]),
        self.var_dep.set(data[4]),
        self.var_course.set(data[5]),
        self.var_year.set(data[6]),
        self.var_group.set(data[7]),
        self.var_radio1.set(data[8])
    
    
    def update_data(self):
        if self.var_dep.get()=="Выберать отделение" or self.var_name.get()=="" or self.var_ID.get()=="":
            messagebox.showerror("Error","Все поля должны быть заполнены",parent=self.root)
        else:
            try:
                Update=messagebox.askyesno("Update","Хотите обновить данные?",parent=self.root)
                if Update>0:
                    conn=mysql.connector.connect(host="localhost",port="3308",username="root",password="007366707",database="students")
                    my_cursor=conn.cursor()
                    my_cursor.execute("update students set name=%s,email=%s,phone=%s,Dep=%s,Course=%s,`Year`=%s,`Group`=%s,photo=%s where Id=%s" ,(
                        
                    self.var_name.get(),
                    self.var_email.get(),
                    self.var_phone.get(),
                    self.var_dep.get(),
                    self.var_course.get(),
                    self.var_year.get(),
                    self.var_group.get(),
                    self.var_radio1.get(),
                    self.var_ID.get()
                    ))
                else:
                    if not Update:
                        return                   
                messagebox.showinfo("Success","Данные обновлены", parent = self.root)
                conn.commit()
                self.fetch_data()
                conn.close()
            except Exception as es:
                messagebox.showerror("Fail",f"Ошибка:{str(es)}",parent=self.root)   
        
    def delete_data(self):
        if self.var_ID.get()=="":
            messagebox.showerror("Fail","Отсутствет ID", parent=self.root)
        else:
            try:
                Delete=messagebox.askyesno("Delete","Удалить данные?",parent=self.root)
                if Delete >0:
                    conn=mysql.connector.connect(host="localhost",port="3308",username="root",password="007366707",database="students")
                    my_cursor=conn.cursor()
                    sql = "delete from students where id=%s"
                    var = (self.var_ID.get(),)
                    my_cursor.execute(sql,var)
                else:
                    if not Delete:
                        return
                    
                conn.commit()
                self.fetch_data()
                conn.close()    
                messagebox.showinfo("Success", "Данные удалены", parent=self.root)
            except Exception as es:
                messagebox.showerror("Fail",f"Ошибка:{str(es)}",parent=self.root)
    
    
    def reset_data(self):
        
        Ask = messagebox.askyesno("Reset","Обновить данные полностью?",parent=self.root)
        if Ask>0:
            
            self.var_dep.set("")
            self.var_course.set("")
            self.var_year.set("")
            self.var_group.set("")
            self.var_ID.set("")
            self.var_name.set("")
            self.var_phone.set("")
            self.var_email.set("")
        
        else:
            self.var_ID.set("")
            self.var_name.set("")
            self.var_phone.set("")
            self.var_email.set("")   
        
    #====================generate dataset take photo==========================
    
    
    def generate_dataset(self):       
        if self.var_dep.get()=="Выберать отделение" or self.var_name.get()=="" or self.var_ID.get()=="":
            messagebox.showerror("Error","Все поля должны быть заполнены",parent=self.root)
        else:
            try:
                conn=mysql.connector.connect(host="localhost",port="3308",username="root",password="007366707",database="students")
                my_cursor=conn.cursor()
                my_cursor.execute("select * from students")
                my_result=my_cursor.fetchall()
                id=0
                for x in my_result:
                    id+=1
                my_cursor.execute("update students set name=%s,email=%s,phone=%s,Dep=%s,Course=%s,`Year`=%s,`Group`=%s,photo=%s where Id=%s" ,(
                        
                    self.var_name.get(),
                    self.var_email.get(),
                    self.var_phone.get(),
                    self.var_dep.get(),
                    self.var_course.get(),
                    self.var_year.get(),
                    self.var_group.get(),
                    self.var_radio1.get(),
                    self.var_ID.get()==id+1
                    ))
                conn.commit()
                self.fetch_data()
                #self.reset_data()
                conn.close()  
                
                #==================   load predefined data on face frontals ========================
                
                face_classifier = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
                
                def face_cropped(img):
                    gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
                    faces=face_classifier.detectMultiScale(gray,1.3,5)
                    #scaling factor = 1.3 min neighbour =5
                    
                    
                    for(x,y,w,h) in faces:
                        face_cropped=img[y:y+h,x:x+w]
                        return face_cropped

                cap=cv2.VideoCapture(0)
                img_id=0
                while True:
                    ret,my_frame=cap.read()
                    if face_cropped(my_frame) is not None:
                        img_id+=1
                    face=cv2.resize(face_cropped(my_frame),(450,450))
                    face=cv2.cvtColor(face,cv2.COLOR_BGR2GRAY)    
                    file_name_path="data/user."+str(id)+"."+str(img_id)+".jpg"
                    cv2.imwrite(file_name_path,face)
                    cv2.putText(face,str(img_id),(50,50),cv2.FONT_HERSHEY_COMPLEX,2,(0,255,0),2)
                    cv2.imshow("Cropped Face",face)
                    
                    if cv2.waitKey(1)==13 or int(img_id)==100:
                        break
                
                cap.release()
                cv2.destroyAllWindows()
                messagebox.showinfo("Result","Создание сета готово")    
            except Exception as es:
                messagebox.showerror("Fail",f"Ошибка:{str(es)}",parent=self.root)
       
                            
if __name__ == "__main__":
    root = Tk()
    obj = Student(root)
    
